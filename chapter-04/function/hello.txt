// Package main: this is a wasm module
package main

import (
	"reflect"
	"strings"
	"unsafe"
)

func main () {}

//export hostPrintString
func hostPrintString(pos, sisze uint32) uint32

// Print a string
func Print(message string) {
    buffer := []byte(message)
	bufferPtr := &buffer[0]
	unsafePtr := uintptr(unsafe.Pointer(bufferPtr))

	pos := uint32(unsafePtr)
	size := uint32(len(buffer))

	hostPrintString(pos, size)
}

//export hostHTTPGet
func hostHTTPGet(pos, size uint32, returnBufferPosition **byte, returnBufferLength *int) uint32


// HTTPGet create an HTTP request
func HTTPGet(url string, headers []string) string { //[]byte

	jsonString := `{
		"headers": [`+strings.Join(headers, ",")+`],
		"url": "`+url+`"
	}`

	// get a pointer position and size in memory for the jsonString
    jsonBuffer := []byte(jsonString)
	jsonBufferPtr := &jsonBuffer[0]
	unsafePtr := uintptr(unsafe.Pointer(jsonBufferPtr))

	pos := uint32(unsafePtr)
	size := uint32(len(jsonBuffer))

	// use to get the position and the size of the returned value
	var buffPtr *byte
	var buffSize int
	
	// call the host function
	hostHTTPGet(pos, size, &buffPtr, &buffSize)
	
	// read the value from the memory
	result := getStringResult(buffPtr, buffSize)

	return result
}

func getStringResult(buffPtr *byte, buffSize int) string {

	result := *(*string)(unsafe.Pointer(&reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(buffPtr)),
		Len:  uintptr(buffSize),
		Cap:  uintptr(buffSize),
	}))

	//Log("üüß getStringResult: " + result)

	return result
}

//export hello
func hello(valuePosition *uint32, length int) uint64 {
	
	// read the memory to get the parameter
	valueBytes := readBufferFromMemory(valuePosition, length)

	message := "Hello " + string(valueBytes)

	Print("üëã from the module: " + message)

	HTTPGet(
		"https://jsonplaceholder.typicode.com/todos/3",
		[]string{
			`{"Content-Type": "application/json; charset=utf-8"}`,
			`{"authentication-token":"ILoveüêº"}`,	
		},
	)

	//Print("ü§ó" + string(b))

	// copy the value to memory
	posSizePairValue := copyBufferToMemory([]byte(message))

	// return the position and size
	return posSizePairValue

}

// readBufferFromMemory returns a buffer from WebAssembly
func readBufferFromMemory(bufferPosition *uint32, length int) []byte {
	subjectBuffer := make([]byte, length)
	pointer := uintptr(unsafe.Pointer(bufferPosition))
	for i := 0; i < length; i++ {
		s := *(*int32)(unsafe.Pointer(pointer + uintptr(i)))
		subjectBuffer[i] = byte(s)
	}
	return subjectBuffer
}

// copyBufferToMemory returns a single value (a kind of pair with position and length)
func copyBufferToMemory(buffer []byte) uint64 {
	bufferPtr := &buffer[0]
	unsafePtr := uintptr(unsafe.Pointer(bufferPtr))

	ptr := uint32(unsafePtr)
	size := uint32(len(buffer))

	return (uint64(ptr) << uint64(32)) | uint64(size)
}
